name: CI

on:
  push:
  release:
  workflow_dispatch:

jobs:

  check:
    name: Check if Docker files have changed
    runs-on: ubuntu-latest
    outputs:
      run_ompi: ${{ steps.check_files.outputs.run_ompi }}
      run_petsc: ${{ steps.check_files.outputs.run_petsc }}
      run_lavavu: ${{ steps.check_files.outputs.run_lavavu }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: check files
        id: check_files
        run: |
          echo "=============== list changed files ==============="
          git diff --name-only HEAD^ HEAD
          
          echo "========== check paths of changed files =========="
          git diff --name-only HEAD^ HEAD > files.txt
              
          echo "{run_ompi}={false}" >> $GITHUB_OUTPUT
          echo "{run_petsc}={false}" >> $GITHUB_OUTPUT
          echo "{run_lavavu}={false}" >> $GITHUB_OUTPUT
          
          while IFS= read -r file
          do
            echo $file
            if [[ $file == "docs/development/docker/petsc/Dockerfile" ]]; then
              echo "Change to the Petsc Docker file have been detected."
              echo "{run_petsc}={true}" >> $GITHUB_OUTPUT
              continue
            fi
            if [[ $file == "docs/development/docker/lavavu/Dockerfile" ]]; then
              echo "Change to the Lavavu Docker file have been detected."
              echo "{run_lavavu}={true}" >> $GITHUB_OUTPUT
              continue
            fi
            if [[ $file == "docs/development/docker/mpi/Dockerfile.openmpi" ]]; then
              echo "Change to the Base Docker file have been detected."
              echo "{run_ompi}={yellow}" >> $GITHUB_OUTPUT
              continue
            fi
          done < files.txt
  
  debug_check:
    runs-on: ubuntu-latest
    needs: check
    steps:
      - run: echo ${{ needs.check.outputs.run_ompi }} ${{needs.check.outputs.run_petsc}} ${{needs.check.outputs.run_lavavu}}
  
  build_ompi_image:
    name: Build OpenMPI Docker image
    needs: check
    if: ${{ needs.check.outputs.run_ompi == 'yellow' }}
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
     
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build Base Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: ./docs/development/docker/mpi/Dockerfile.openmpi
          platforms: linux/amd64
          tags: julesg/openmpi-4.1.4:amd64
      
#       - name: Update manifest
#         run: |
#           docker manifest create julesg/openmpi --amend julesg/openmpi:amd64 --amend julesg/openmpi:arm64
#           docker manifest push julesg/openmpi

  build_petsc_image:
    name: Build PETSc Docker image
    needs: [check, build_ompi_image]
    #if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) && (env.run_ompi == 'true')}}
    if: ${{ needs.check.outputs.run_ompi == 'true' }}
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build Petsc Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: ./docs/development/docker/petsc/Dockerfile
          platforms: linux/amd64
          tags: julesg/petsc:amd64
      
#       - name: Update manifest
#         run: |
#           docker manifest create julesg/petsc --amend julesg/petsc:amd64 --amend julesg/petsc:arm64
#           docker manifest push julesg/petsc
      
  build_lavavu_image:
    name: Build Lavavu Docker image
    needs: check
    if: ${{ needs.check.outputs.run_lavavu == 'true' }}
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build Lavavu Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: ./docs/development/docker/lavavu/Dockerfile
          platforms: linux/amd64
          tags: julesg/lavavu:amd64
      
#       - name: Update manifest
#         run: |
#           docker manifest create underworldcode/lavavu --amend underworldcode/lavavu:amd64 --amend underworldcode/lavavu:arm64
#           docker manifest push underworldcode/lavavu


  build_underworld_image:
    name: Build Underworld Image
    runs-on: ubuntu-latest
    needs: [build_ompi_image, build_petsc_image]
    if: github.event_name == 'release' #|| github.event_name == 'workflow_dispatch'
    steps:
      
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build Underworld Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: ./docs/development/docker/underworld2/Dockerfile
          platforms: linux/amd64
          tags: julesg/underworld2:amd64

#       - name: Update manifest
#         run: |
#           docker manifest create julesg/underworld2 --amend julesg/underworld2:amd64 --amend julesg/underworld2:arm64
#           docker manifest push julesg/underworld2


  test_in_UW_Container:
    name: Test in Docker Container
    needs: [build_ompi_image]
    if: always()
    runs-on: ubuntu-latest
    container:
      image: julesg/underworld2
      options: --user root
    steps:

      - name: Build dependencies
        run: |
          apt-get update -qq 
          DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends build-essential pkg-config python3-dev swig libxml2-dev cmake ninja-build

      - name: Runtime dependencies
        run: |
          apt-get update -qq
          DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends libxml2 libpython3.10

      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Install Underworld
        run: |
          pip install -vvv .

      - name: Run Tests
        run: |
          pip install pytest nbmake
          cd docs
          pytest -vvv pytests/*
          cd test
          cp -rf ../UWGeodynamics/examples UWGeodynamics/.
          cp -rf ../UWGeodynamics/tutorials UWGeodynamics/.
          cp -rf ../UWGeodynamics/benchmarks UWGeodynamics/.
          pytest -vvv UWGeodynamics


#   conda_build:
#       name: Conda Build (Python ${{matrix.python-version}} ${{ matrix.os }})
#       runs-on: ${{ matrix.os }}
#       strategy:
#         fail-fast: false
#         matrix:
#           os: ["ubuntu-latest", "macos-latest"]
#           python-version: ["3.8", "3.9", "3.10"]
#       steps:
#         - uses: actions/checkout@v2
#         - uses: conda-incubator/setup-miniconda@v2
#           with:
#             auto-update-conda: true
#             python-version: ${{ matrix.python-version }}
        
#         - name: Config Conda
#           shell: bash -l {0}
#           run: |
#               conda install --channel conda-forge conda-build anaconda-client conda-verify
#               conda config --add channels conda-forge
#               conda config --add channels underworldcode
#               conda config --set anaconda_upload no
  
#         - name: Config Conda For Upload
#           if: github.event_name == 'release'
#           shell: bash -l {0}
#           run: conda config --set anaconda_upload yes
  
#         - name: Upload new Packages
#           if: github.event_name == 'release'
#           shell: bash -l {0}
#           run: |
#               anaconda login --hostname github-actions-${{ matrix.os  }}-$RANDOM --username ${{ secrets.ANACONDA_USERNAME }} --password ${{ secrets.ANACONDA_PASSWORD }}
#               conda-build --channel conda-forge --user geo-down-under conda
#               anaconda logout

#   pypi:
#     runs-on: ${{ matrix.os }}
#     env:
#       TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
#       TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
#     strategy:
#       matrix:
#         os: ["ubuntu-latest", "macos-latest"]
#         python-version: ["3.8", "3.9", "3.10"]
#     steps:
#       - uses: actions/checkout@v2
#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: ${{ matrix.python-version }}
#       - name: Package for Pypi
#         run: |
#           python setup.py sdist
#       - name: Upload to Pypi
#         if: github.event_name == 'release'
#         run: |
#           pip install twine
#           python -m twine upload dist/* -r pypi
